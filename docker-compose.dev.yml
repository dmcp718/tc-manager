# Development Environment - Hot Reload & Volume Mounts
# Usage: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

services:
  # Backend with volume mount for hot reload
  backend:
    build:
      context: ..
      dockerfile: ./tc-manager/backend/Dockerfile
      target: development
    container_name: sc-mgr-backend-dev
    user: root
    env_file:
      - ./.env.development.local
    volumes:
      # Mount source code for live reload
      - ./backend:/app
      - /app/node_modules  # Anonymous volume for node_modules
      - backend_logs:/app/logs
      # LucidLink mount point will be created by container daemon
      - varnish_stats:/data
      - ${PREVIEW_CACHE_HOST_PATH:-./data/previews}:/app/preview-cache  # Persistent preview cache
      # Mount host system info file if it exists
      - ./host-info.json:/app/host-info.json:ro
    environment:
      NODE_ENV: development
      PREVIEW_CACHE_DIR: /app/preview-cache
      PORT: 3001
      SERVER_HOST: ${SERVER_HOST:-localhost}
      DB_HOST: postgres  # Use service name with bridge networking
      DB_PORT: 5432
      DB_NAME: teamcache_db
      DB_USER: teamcache_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin123}  # Use env var or default to admin123 for dev
      # INDEX_ROOT_PATH is deprecated - use INDEX_ROOT_PATHS instead
      ALLOWED_PATHS: /media/lucidlink-1,/media/lucidlink-2
      NETWORK_INTERFACE: eth0
      LUCIDLINK_FS_1_PORT: 7778
      ENABLE_NETWORK_STATS: "false"
      ENABLE_LUCIDLINK_STATS: "true"
      LUCIDLINK_COMMAND: /usr/local/bin/lucid
      LUCIDLINK_MOUNT_POINT: /media/lucidlink-1
      UV_THREADPOOL_SIZE: 16
      NODE_OPTIONS: "--max-old-space-size=1536"
      CACHE_WORKER_COUNT: 4
      MAX_CONCURRENT_FILES: 40
      WORKER_POLL_INTERVAL: 2000
      ELASTICSEARCH_HOST: elasticsearch  # Use service name with bridge networking
      ELASTICSEARCH_PORT: 9200
      ELASTICSEARCH_INDEX: sitecache-files
      JWT_SECRET: dev-secret-key-change-in-production
      JWT_EXPIRY: 8h
      ADMIN_USERNAME: admin
      ADMIN_PASSWORD: admin123
      # LucidLink Configuration - Same as production
      LUCIDLINK_API_HOST: 127.0.0.1
      LUCIDLINK_FILESPACE: ${LUCIDLINK_FILESPACE:-}
      LUCIDLINK_USER: ${LUCIDLINK_USER:-}
      LUCIDLINK_PASSWORD: ${LUCIDLINK_PASSWORD:-}
      LUCID_S3_PROXY: ${LUCID_S3_PROXY:-}
      # RUI Configuration
      ENABLE_RUI: "false"
      RUI_SCAN_INTERVAL: 30000
      RUI_MONITOR_INTERVAL: 2000
      RUI_BATCH_SIZE: 100
      RUI_MAX_CONCURRENT_MONITORS: 10
      LUCIDLINK_API_PORT: 9780
      # Redis connection for media preview service
      REDIS_URL: redis://redis:6379
    command: ["./start-lucidlink.sh", "node", "server-v2.js"]
    ports:
      - "3001:3001"  # Backend API port
      - "3002:3002"  # WebSocket port
    depends_on:
      postgres:
        condition: service_healthy
    # LucidLink FUSE filesystem requirements and host system access
    cap_add:
      - SYS_ADMIN
    pid: host
    privileged: true

  # Frontend with volume mount for hot reload
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development  # We'll add this target to Dockerfile
    container_name: sc-mgr-frontend-dev
    user: root
    ports:
      - "8090:3010"  # React dev server port (avoid conflict with Grafana on 3000)
    volumes:
      # Mount source code for live reload
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/package.json:/app/package.json
      - /app/node_modules  # Anonymous volume for node_modules
    environment:
      REACT_APP_API_URL: http://${SERVER_HOST:-localhost}:3001/api
      # WebSocket URL uses SERVER_HOST - set in .env.development.local to your machine's IP
      REACT_APP_WS_URL: ws://${SERVER_HOST:-localhost}:3002
      REACT_APP_LUCIDLINK_MOUNT_POINT: /media/lucidlink-1
      CHOKIDAR_USEPOLLING: "true"  # For file watching in Docker
      FAST_REFRESH: "true"
      PORT: 3010  # Use port 3010 inside container to avoid Grafana conflict
    command: npm start
    depends_on:
      - backend
    stdin_open: true  # Needed for React dev server
    tty: true

  # API Gateway for external cache job submissions
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: sc-mgr-api-gateway-dev
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      API_GATEWAY_PORT: 8095
      API_GATEWAY_KEY: ${API_GATEWAY_KEY:-demo-api-key-2024}
      DB_HOST: postgres
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-sitecache_db}
      DB_USER: ${DB_USER:-sitecache_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_password_here}
      ALLOWED_PATHS: ${ALLOWED_PATHS:-/media/lucidlink-1,/media/lucidlink-2}
    ports:
      - "${API_GATEWAY_PORT:-8095}:8095"
    volumes:
      - api-config:/config
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - default
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
    driver: local
  backend_logs:
    driver: local
  lucidlink_mount:
    driver: local
  varnish_stats:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  api-config:
    driver: local

networks:
  default:
    name: sc-mgr-network