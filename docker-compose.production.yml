version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sitecache-postgres
    environment:
      POSTGRES_DB: sitecache_db
      POSTGRES_USER: sitecache_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sitecache_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./backend/schema-profiles.sql:/docker-entrypoint-initdb.d/02-profiles.sql
      - ./backend/schema-direct-links.sql:/docker-entrypoint-initdb.d/03-direct-links.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sitecache_user -d sitecache_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    # Security options
    security_opt:
      - no-new-privileges:true
    # User namespace (run as non-root inside container)
    user: postgres
    # Read-only root filesystem (except for specific mounts)
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Backend API Service with Host Network Mode
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sitecache-backend
    # Use host network mode for direct access to LucidLink API
    network_mode: host
    environment:
      NODE_ENV: production
      PORT: 3001
      # Database connection via localhost since we're using host network
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: sitecache_db
      DB_USER: sitecache_user
      DB_PASSWORD: ${POSTGRES_PASSWORD:-sitecache_password}
      INDEX_ROOT_PATH: ${INDEX_ROOT_PATH:-/mnt/lucidlink}
      ALLOWED_PATHS: ${ALLOWED_PATHS:-/mnt/lucidlink}
      # Network interface on host machine
      NETWORK_INTERFACE: ${NETWORK_INTERFACE:-eth0}
      LUCIDLINK_FS_1_PORT: 9782
      # Direct access to localhost LucidLink API
      LUCIDLINK_API_HOST: 127.0.0.1
    volumes:
      # Mount LucidLink filesystem
      - ${LUCIDLINK_MOUNT:-/mnt/lucidlink}:/mnt/lucidlink:ro
      # Application logs
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    # Resource limits (host network mode, so deploy section might not apply)
    # Using Docker run constraints instead
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 1G
    # Security options
    security_opt:
      - no-new-privileges:true
      - "apparmor:unconfined"  # Required for LucidLink FUSE access
    # LucidLink FUSE filesystem requirements
    cap_add:
      - SYS_ADMIN
    devices:
      - "/dev/fuse"
    # Process limits
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
      nproc:
        soft: 32768
        hard: 32768

  # Frontend Web Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sitecache-frontend
    ports:
      - "80:80"
      - "443:443"  # For SSL in production
    environment:
      # Backend is accessible on host's localhost
      BACKEND_URL: http://localhost:3001
    volumes:
      # SSL certificates volume (optional)
      - ssl_certs:/etc/nginx/ssl:ro
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    # Security options
    security_opt:
      - no-new-privileges:true
    # Run as non-root user
    user: "101:101"  # nginx user
    # Read-only root filesystem
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
      - /tmp

volumes:
  postgres_data:
    driver: local
  backend_logs:
    driver: local
  ssl_certs:
    driver: local