# SiteCache Manager Environment Configuration Template
# 
# This file contains all available environment variables for SiteCache Manager.
# Copy this file to .env and configure with your specific values.
# 
# For development: You can also create .env.development.local for dev-specific overrides
# For production: Create .env.production.local for production-specific values
# 
# IMPORTANT: Never commit files containing actual passwords or credentials!

# =============================================================================
# DEPLOYMENT CONFIGURATION
# =============================================================================

# Environment mode: development or production
NODE_ENV=production

# Server hostname or IP address where the application is deployed
# This is used by the frontend to connect to the backend API
# Examples: 
#   - localhost (for local development)
#   - 192.168.1.100 (for LAN access)
#   - sitecache.example.com (for production domain)
SERVER_HOST=localhost

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# PostgreSQL connection settings
DB_HOST=postgres
DB_PORT=5432
DB_NAME=sitecache_db
DB_USER=sitecache_user

# IMPORTANT: Change this password for production!
# This password is used for PostgreSQL database authentication
POSTGRES_PASSWORD=your_secure_password_here

# =============================================================================
# LUCIDLINK CONFIGURATION
# =============================================================================

# LucidLink mount point and paths
INDEX_ROOT_PATH=/media/lucidlink-1
ALLOWED_PATHS=/media/lucidlink-1
LUCIDLINK_MOUNT_POINT=/media/lucidlink-1
LUCIDLINK_COMMAND=/usr/local/bin/lucid

# LucidLink credentials (required for production)
LUCIDLINK_FILESPACE=your_filespace_name
LUCIDLINK_USER=your_lucidlink_email
LUCIDLINK_PASSWORD=your_lucidlink_password

# LucidLink API settings
LUCIDLINK_API_HOST=127.0.0.1
LUCIDLINK_API_PORT=9780
LUCIDLINK_FS_1_PORT=7778

# LucidLink performance monitoring
ENABLE_LUCIDLINK_STATS=true
LUCIDLINK_INCLUDE_GET_TIME=true

# S3 proxy configuration (optional, for Varnish cache)
# Example: http://your-server-ip:80
LUCID_S3_PROXY=

# =============================================================================
# AUTHENTICATION & SECURITY
# =============================================================================

# JWT configuration
# IMPORTANT: Generate a strong secret for production!
# You can use: openssl rand -base64 32
JWT_SECRET=your_jwt_secret_key_here
JWT_EXPIRY=24h

# Default admin credentials
# IMPORTANT: Change these immediately after first login!
ADMIN_USERNAME=admin
ADMIN_PASSWORD=change_me_immediately

# =============================================================================
# FRONTEND CONFIGURATION
# =============================================================================

# These URLs are automatically constructed using SERVER_HOST
# Default uses HTTPS with nginx self-signed SSL (works with IP addresses)
REACT_APP_API_URL=https://${SERVER_HOST}/api
REACT_APP_WS_URL=wss://${SERVER_HOST}/ws
REACT_APP_LUCIDLINK_MOUNT_POINT=/media/lucidlink-1
REACT_APP_GRAFANA_URL=https://${SERVER_HOST}:3000

# For non-SSL deployment (development only), uncomment these:
# REACT_APP_API_URL=http://${SERVER_HOST}:8090/api
# REACT_APP_WS_URL=ws://${SERVER_HOST}:8090/ws

# =============================================================================
# SERVICE CONFIGURATION
# =============================================================================

# Backend service ports
PORT=3001
WS_PORT=3002

# Network monitoring
NETWORK_INTERFACE=eth0
ENABLE_NETWORK_STATS=false

# Cache worker configuration
CACHE_WORKER_COUNT=4
MAX_CONCURRENT_FILES=10
WORKER_POLL_INTERVAL=2000

# Performance tuning
UV_THREADPOOL_SIZE=16
NODE_OPTIONS=--max-old-space-size=2048

# Preview cache directory (on host)
PREVIEW_CACHE_HOST_PATH=./data/previews

# =============================================================================
# ELASTICSEARCH CONFIGURATION
# =============================================================================

ELASTICSEARCH_HOST=elasticsearch
ELASTICSEARCH_PORT=9200
ELASTICSEARCH_INDEX=sitecache-files
ELASTICSEARCH_SYNC_DELETIONS=true

# =============================================================================
# MONITORING & STATS
# =============================================================================

# Varnish cache statistics
VARNISH_STATS_INTERVAL=60000
VARNISH_CONTAINER_NAME=varnish

# Remote Upload Indicator (RUI) service
# Tracks files being uploaded across the LucidLink filesystem
#
# RUI Operation Modes:
# 1. Disabled: ENABLE_RUI=false (no upload tracking)
# 2. Database only: ENABLE_RUI=true, ENABLE_RUI_FILESYSTEM_SCANNER=false (lighter resource usage)
# 3. Full scanning: ENABLE_RUI=true, ENABLE_RUI_FILESYSTEM_SCANNER=true (best performance)
#
ENABLE_RUI=true                          # Master switch for entire RUI feature
ENABLE_RUI_FILESYSTEM_SCANNER=true       # Enable filesystem scanning (in addition to database)
RUI_SCAN_INTERVAL=30000                  # How often to scan for uploads (ms)
RUI_MONITOR_INTERVAL=2000                # How often to check upload progress (ms)
RUI_BATCH_SIZE=100                       # Number of files to process per batch
RUI_MAX_CONCURRENT_MONITORS=10           # Max concurrent upload monitors

# =============================================================================
# TERMINAL FEATURE (Admin)
# =============================================================================

# SSH configuration for terminal access to host system
# The container needs to SSH to the host for terminal functionality
SSH_HOST=host.docker.internal
SSH_USER=ubuntu
SSH_PORT=22

# Note: SSH key authentication is recommended. The container generates a key at:
# /root/.ssh/id_rsa.pub
# Add this public key to your host's ~/.ssh/authorized_keys file

# =============================================================================
# REDIS CONFIGURATION
# =============================================================================

REDIS_URL=redis://redis:6379

# =============================================================================
# MEDIA TRANSCODING
# =============================================================================

# Video transcoding settings for preview generation
TRANSCODE_VIDEO_CODEC=libx264
TRANSCODE_VIDEO_BITRATE=1000k
TRANSCODE_VIDEO_MAXRATE=2000k
TRANSCODE_VIDEO_BUFSIZE=2000k
TRANSCODE_VIDEO_PRESET=fast
TRANSCODE_AUDIO_CODEC=aac
TRANSCODE_AUDIO_BITRATE=128k
TRANSCODE_SCALE=-2:720

# =============================================================================
# DEVELOPMENT-SPECIFIC SETTINGS
# =============================================================================

# React development server
CHOKIDAR_USEPOLLING=true
FAST_REFRESH=true
GENERATE_SOURCEMAP=true

# =============================================================================
# SSL/TLS CONFIGURATION (Production)
# =============================================================================

# Production deployments use nginx with self-signed SSL by default:
# - Works reliably with IP addresses (most common deployment scenario)
# - Automatic self-signed certificate generation
# - No configuration needed - just run ./scripts/deploy-production.sh
#
# For other SSL options:
# - Use 'caddy' mode for automatic Let's Encrypt certificates (requires domain name)
# - Use 'none' mode for development without SSL (not recommended for production)

# =============================================================================
# NOTES
# =============================================================================

# 1. Environment Variable Precedence:
#    - .env.production.local (production, gitignored)
#    - .env.development.local (development, gitignored)
#    - .env.local (all environments, gitignored)
#    - .env.production or .env.development (committed)
#    - .env (fallback, should not be committed with secrets)

# 2. For Docker Desktop on Mac/Windows:
#    - Use 'host.docker.internal' for LUCIDLINK_API_HOST in development
#    - Use actual IP or '127.0.0.1' for Linux or production

# 3. Security Best Practices:
#    - Never commit actual passwords or secrets
#    - Use strong, unique passwords for production
#    - Rotate JWT secret regularly
#    - Restrict database access to localhost in production
#    - Use SSL/TLS for production deployments

# 4. Performance Tuning:
#    - Adjust CACHE_WORKER_COUNT based on CPU cores
#    - Increase NODE_OPTIONS memory for large filesystems
#    - Configure ELASTICSEARCH heap size for large indexes