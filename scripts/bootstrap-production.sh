#!/bin/bash

# SiteCache Manager Production Bootstrap Script
# This script sets up a production deployment from a fresh git clone

set -e

echo "ðŸš€ SiteCache Manager Production Bootstrap"
echo "=========================================="

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root (required for Docker and system modifications)
if [ "$EUID" -ne 0 ]; then
    print_warning "This script should be run as root for full system setup"
    print_warning "Some steps may be skipped. Run with 'sudo' for complete setup."
fi

# Check if required commands exist
check_requirements() {
    print_status "Checking system requirements..."
    
    local missing=0
    
    if ! command -v docker &> /dev/null; then
        print_error "Docker is not installed"
        missing=1
    fi
    
    if ! docker compose version &> /dev/null; then
        print_error "Docker Compose is not installed or not working"
        missing=1
    fi
    
    if ! command -v git &> /dev/null; then
        print_error "Git is not installed"
        missing=1
    fi
    
    if [ $missing -eq 1 ]; then
        print_error "Please install missing requirements and try again"
        exit 1
    fi
    
    print_success "All requirements satisfied"
}

# Create environment file from template
setup_environment() {
    print_status "Setting up production environment file..."
    
    if [ ! -f .env ]; then
        if [ -f .env.production.example ]; then
            cp .env.production.example .env
            print_success "Created .env from .env.production.example"
        elif [ -f .env.example ]; then
            cp .env.example .env
            print_success "Created .env from .env.example"
        else
            print_warning "No environment template found, creating basic .env"
            cat > .env << EOF
# Production Environment - Generated by bootstrap script
NODE_ENV=production

# Database Configuration (CHANGE THESE!)
POSTGRES_PASSWORD=CHANGE_ME_$(openssl rand -hex 16)
DB_NAME=sitecache_db
DB_USER=sitecache_user

# Authentication (CHANGE THESE!)
JWT_SECRET=CHANGE_ME_$(openssl rand -hex 32)
ADMIN_USERNAME=admin
ADMIN_PASSWORD=CHANGE_ME_$(openssl rand -hex 8)

# LucidLink Configuration (CONFIGURE THESE!)
LUCIDLINK_FILESPACE=your-filespace-name
LUCIDLINK_USER=your-username
LUCIDLINK_PASSWORD=your-password
LUCIDLINK_MOUNT_POINT=/media/lucidlink-1

# API URLs (UPDATE THESE WITH YOUR SERVER IP!)
REACT_APP_API_URL=http://YOUR_SERVER_IP:3001/api
REACT_APP_WS_URL=ws://YOUR_SERVER_IP:3002
EOF
        fi
        
        print_warning "IMPORTANT: Edit the .env file with your production settings!"
        print_warning "Pay special attention to:"
        print_warning "  - Database passwords"
        print_warning "  - JWT secret"
        print_warning "  - Admin credentials"
        print_warning "  - LucidLink configuration"
        print_warning "  - Server IP addresses"
        
        echo ""
        read -p "Press Enter after you've configured the .env file..." || true
    else
        print_success "Environment file already exists"
    fi
}

# Set up Docker volumes and networks
setup_docker() {
    print_status "Setting up Docker environment..."
    
    # Create named volumes
    docker volume create sitecache_postgres_data 2>/dev/null || true
    docker volume create sitecache_elasticsearch_data 2>/dev/null || true
    docker volume create sitecache_redis_data 2>/dev/null || true
    docker volume create sitecache_backend_logs 2>/dev/null || true
    docker volume create sitecache_lucidlink_mount 2>/dev/null || true
    docker volume create sitecache_varnish_stats 2>/dev/null || true
    
    # Create network
    docker network create sitecache-network 2>/dev/null || true
    
    print_success "Docker volumes and networks created"
}

# Build production images
build_images() {
    print_status "Building production Docker images..."
    
    # Load environment variables
    set -a
    source .env
    set +a
    
    # Build images
    docker compose -f docker-compose.yml -f docker-compose.prod.yml build --no-cache
    
    print_success "Production images built successfully"
}

# Start services with health checks
start_services() {
    print_status "Starting production services..."
    
    # Start services
    docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
    
    # Wait for services to be healthy
    print_status "Waiting for services to be healthy..."
    
    local max_attempts=30
    local attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
        if docker compose -f docker-compose.yml -f docker-compose.prod.yml ps | grep -q "unhealthy"; then
            attempt=$((attempt + 1))
            print_status "Waiting for services to start... ($attempt/$max_attempts)"
            sleep 10
        else
            break
        fi
    done
    
    if [ $attempt -eq $max_attempts ]; then
        print_error "Some services failed to start properly"
        docker compose -f docker-compose.yml -f docker-compose.prod.yml ps
        exit 1
    fi
    
    print_success "All services started successfully"
}

# Run smoke tests
run_smoke_tests() {
    print_status "Running smoke tests..."
    
    # Test backend health endpoint
    if curl -f http://localhost:3001/health > /dev/null 2>&1; then
        print_success "Backend health check passed"
    else
        print_error "Backend health check failed"
        return 1
    fi
    
    # Test frontend
    if curl -f http://localhost:8080 > /dev/null 2>&1; then
        print_success "Frontend health check passed"
    else
        print_error "Frontend health check failed"
        return 1
    fi
    
    # Test database connection
    if docker compose exec -T postgres pg_isready -U sitecache_user -d sitecache_db > /dev/null 2>&1; then
        print_success "Database health check passed"
    else
        print_error "Database health check failed"
        return 1
    fi
    
    print_success "All smoke tests passed"
}

# Create systemd service (if running as root)
create_systemd_service() {
    if [ "$EUID" -eq 0 ] && command -v systemctl &> /dev/null; then
        print_status "Creating systemd service..."
        
        cat > /etc/systemd/system/sitecache-manager.service << EOF
[Unit]
Description=SiteCache Manager
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=$(pwd)
ExecStart=/usr/bin/docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
ExecStop=/usr/bin/docker compose -f docker-compose.yml -f docker-compose.prod.yml down
TimeoutStartSec=0

[Install]
WantedBy=multi-user.target
EOF
        
        systemctl daemon-reload
        systemctl enable sitecache-manager
        
        print_success "Systemd service created and enabled"
        print_status "You can manage the service with:"
        print_status "  sudo systemctl start sitecache-manager"
        print_status "  sudo systemctl stop sitecache-manager"
        print_status "  sudo systemctl status sitecache-manager"
    fi
}

# Print final information
print_final_info() {
    echo ""
    echo "ðŸŽ‰ SiteCache Manager Production Setup Complete!"
    echo "=============================================="
    echo ""
    print_success "Services are running on:"
    print_success "  Frontend: http://$(hostname -I | awk '{print $1}'):8080"
    print_success "  Backend API: http://$(hostname -I | awk '{print $1}'):3001"
    print_success "  WebSocket: ws://$(hostname -I | awk '{print $1}'):3002"
    echo ""
    print_status "Management commands:"
    print_status "  View logs: docker compose -f docker-compose.yml -f docker-compose.prod.yml logs -f"
    print_status "  Stop services: docker compose -f docker-compose.yml -f docker-compose.prod.yml down"
    print_status "  Restart services: docker compose -f docker-compose.yml -f docker-compose.prod.yml restart"
    echo ""
    print_warning "Next steps:"
    print_warning "1. Configure your reverse proxy (nginx/apache) if needed"
    print_warning "2. Set up SSL certificates for production"
    print_warning "3. Configure firewall rules"
    print_warning "4. Set up log rotation"
    print_warning "5. Configure backup procedures"
    echo ""
}

# Main execution
main() {
    check_requirements
    setup_environment
    setup_docker
    build_images
    start_services
    run_smoke_tests
    create_systemd_service
    print_final_info
}

# Run main function
main "$@"