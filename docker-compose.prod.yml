# Production Environment - Built Images & Production Settings
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

services:
  # Backend for production
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: sc-mgr-backend-prod
    # Performance optimizations
    mem_limit: 4g
    cpus: 4.0
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    environment:
      NODE_ENV: production
      PORT: ${PORT:-3001}
      DB_HOST: postgres
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-sitecache_db}
      DB_USER: ${DB_USER:-sitecache_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-sitecache_password}
      INDEX_ROOT_PATH: ${INDEX_ROOT_PATH:-/media/lucidlink-1}
      ALLOWED_PATHS: ${ALLOWED_PATHS:-/media/lucidlink-1}
      NETWORK_INTERFACE: ${NETWORK_INTERFACE:-eth0}
      LUCIDLINK_FS_1_PORT: ${LUCIDLINK_FS_1_PORT:-7778}
      ENABLE_NETWORK_STATS: "false"
      ENABLE_LUCIDLINK_STATS: ${ENABLE_LUCIDLINK_STATS:-true}
      LUCIDLINK_COMMAND: ${LUCIDLINK_COMMAND:-/usr/local/bin/lucid}
      # LucidLink daemon configuration
      LUCIDLINK_FILESPACE: ${LUCIDLINK_FILESPACE}
      LUCIDLINK_USER: ${LUCIDLINK_USER}
      LUCIDLINK_PASSWORD: ${LUCIDLINK_PASSWORD}
      LUCIDLINK_MOUNT_POINT: ${LUCIDLINK_MOUNT_POINT:-/media/lucidlink-1}
      # Performance tuning
      UV_THREADPOOL_SIZE: 16
      NODE_OPTIONS: "--max-old-space-size=1536"
      # Cache worker optimizations
      CACHE_WORKER_COUNT: ${CACHE_WORKER_COUNT:-2}
      MAX_CONCURRENT_FILES: ${MAX_CONCURRENT_FILES:-5}
      WORKER_POLL_INTERVAL: ${WORKER_POLL_INTERVAL:-2000}
      # Elasticsearch configuration
      ELASTICSEARCH_HOST: ${ELASTICSEARCH_HOST:-elasticsearch}
      ELASTICSEARCH_PORT: ${ELASTICSEARCH_PORT:-9200}
      ELASTICSEARCH_INDEX: ${ELASTICSEARCH_INDEX:-sitecache-files}
      # Authentication configuration
      JWT_SECRET: ${JWT_SECRET:-dev-secret-key-change-in-production}
      JWT_EXPIRY: ${JWT_EXPIRY:-8h}
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
      # Use host.docker.internal to access host machine from container
      LUCIDLINK_API_HOST: ${LUCIDLINK_API_HOST:-host.docker.internal}
    volumes:
      # Application logs
      - backend_logs:/app/logs
      # Create mount point for LucidLink (will be mounted by daemon inside container)
      - lucidlink_mount:/media/lucidlink-1
      # Shared volume for varnish stats
      - varnish_stats:/data
    ports:
      - "3001:3001"
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    # Add host machine access (for LucidLink API)
    extra_hosts:
      - "host.docker.internal:host-gateway"
    # LucidLink FUSE filesystem requirements
    cap_add:
      - SYS_ADMIN
    devices:
      - "/dev/fuse"
    security_opt:
      - "apparmor:unconfined"

  # Frontend for production
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://192.168.8.28:3001/api}
        REACT_APP_WS_URL: ${REACT_APP_WS_URL:-ws://192.168.8.28:3002}
        REACT_APP_LUCIDLINK_MOUNT_POINT: ${LUCIDLINK_MOUNT_POINT:-/media/lucidlink-1}
    container_name: sc-mgr-frontend-prod
    ports:
      - "8080:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  backend_logs:
    driver: local
  lucidlink_mount:
    driver: local
  varnish_stats:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  default:
    name: sc-mgr-network