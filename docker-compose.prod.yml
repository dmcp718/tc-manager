# Production Environment - Built Images & Production Settings
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

services:
  # Backend for production
  backend:
    build:
      context: ..
      dockerfile: ./tc-manager/backend/Dockerfile
      target: production
    container_name: tc-mgr-backend
    # Performance optimizations
    mem_limit: 8g
    cpus: 8.0
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    environment:
      NODE_ENV: production
      PREVIEW_CACHE_DIR: /app/preview-cache
      PORT: ${PORT:-3001}
      DB_HOST: postgres
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-teamcache_db}
      DB_USER: ${DB_USER:-teamcache_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-teamcache_password}
      INDEX_ROOT_PATH: ${INDEX_ROOT_PATH:-/media/lucidlink-1}
      NETWORK_INTERFACE: ${NETWORK_INTERFACE:-eth0}
      LUCIDLINK_FS_1_PORT: ${LUCIDLINK_FS_1_PORT:-7778}
      ENABLE_NETWORK_STATS: "false"
      ENABLE_LUCIDLINK_STATS: ${ENABLE_LUCIDLINK_STATS:-true}
      LUCIDLINK_COMMAND: ${LUCIDLINK_COMMAND:-/usr/local/bin/lucid}
      # LucidLink daemon configuration
      LUCIDLINK_FILESPACE: ${LUCIDLINK_FILESPACE}
      LUCIDLINK_USER: ${LUCIDLINK_USER}
      LUCIDLINK_PASSWORD: ${LUCIDLINK_PASSWORD}
      LUCIDLINK_MOUNT_POINT: ${LUCIDLINK_MOUNT_POINT:-/media/lucidlink-1}
      # Multi-filespace configuration (numbered instances)
      LUCIDLINK_FILESPACE_1: ${LUCIDLINK_FILESPACE_1}
      LUCIDLINK_USER_1: ${LUCIDLINK_USER_1}
      LUCIDLINK_PASSWORD_1: ${LUCIDLINK_PASSWORD_1}
      LUCIDLINK_MOUNT_POINT_1: ${LUCIDLINK_MOUNT_POINT_1:-/media/lucidlink-1}
      LUCIDLINK_INSTANCE_1: ${LUCIDLINK_INSTANCE_1:-2001}
      LUCIDLINK_API_PORT_1: ${LUCIDLINK_API_PORT_1:-9780}
      LUCIDLINK_FILESPACE_2: ${LUCIDLINK_FILESPACE_2}
      LUCIDLINK_USER_2: ${LUCIDLINK_USER_2}
      LUCIDLINK_PASSWORD_2: ${LUCIDLINK_PASSWORD_2}
      LUCIDLINK_MOUNT_POINT_2: ${LUCIDLINK_MOUNT_POINT_2:-/media/lucidlink-2}
      LUCIDLINK_INSTANCE_2: ${LUCIDLINK_INSTANCE_2:-2002}
      LUCIDLINK_API_PORT_2: ${LUCIDLINK_API_PORT_2:-9781}
      # Combined paths for indexing
      INDEX_ROOT_PATHS: ${INDEX_ROOT_PATHS}
      ALLOWED_PATHS: ${ALLOWED_PATHS}
      # Performance tuning
      UV_THREADPOOL_SIZE: 16
      NODE_OPTIONS: "--max-old-space-size=6144"
      # Cache worker optimizations
      CACHE_WORKER_COUNT: ${CACHE_WORKER_COUNT:-4}
      MAX_CONCURRENT_FILES: ${MAX_CONCURRENT_FILES:-10}
      WORKER_POLL_INTERVAL: ${WORKER_POLL_INTERVAL:-2000}
      # Elasticsearch configuration
      ELASTICSEARCH_HOST: ${ELASTICSEARCH_HOST:-elasticsearch}
      ELASTICSEARCH_PORT: ${ELASTICSEARCH_PORT:-9200}
      ELASTICSEARCH_INDEX: ${ELASTICSEARCH_INDEX:-sitecache-files}
      # Authentication configuration
      JWT_SECRET: ${JWT_SECRET:-dev-secret-key-change-in-production}
      JWT_EXPIRY: ${JWT_EXPIRY:-8h}
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
      # Use host.docker.internal to access host machine from container
      LUCIDLINK_API_HOST: ${LUCIDLINK_API_HOST:-host.docker.internal}
      # Configure S3 proxy for Varnish cache
      LUCID_S3_PROXY: ${LUCID_S3_PROXY}
      # Video preview worker configuration
      VIDEO_PREVIEW_WORKER_COUNT: ${VIDEO_PREVIEW_WORKER_COUNT:-4}
      VIDEO_PREVIEW_MAX_CONCURRENT: ${VIDEO_PREVIEW_MAX_CONCURRENT:-4}
      VIDEO_PREVIEW_POLL_INTERVAL: ${VIDEO_PREVIEW_POLL_INTERVAL:-5000}
    volumes:
      # Application logs
      - backend_logs:/app/logs
      # Create mount points for LucidLink (will be mounted by daemon inside container)
      - lucidlink_mount:/media/lucidlink-1
      - lucidlink_mount_2:/media/lucidlink-2
      # Shared volume for varnish stats
      - varnish_stats:/data
      # Persistent preview cache
      - ${PREVIEW_CACHE_HOST_PATH:-/var/sc-mgr/previews}:/app/preview-cache
    ports:
      - "3001:3001"
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    # Add host machine access (for LucidLink API)
    extra_hosts:
      - "host.docker.internal:host-gateway"
    # LucidLink FUSE filesystem requirements (inherited from base compose)
    # cap_add, devices, and security_opt already defined in docker-compose.yml

  # Frontend for production
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        REACT_APP_API_URL: /api
        REACT_APP_WS_URL: /ws
        REACT_APP_LUCIDLINK_MOUNT_POINT: ${LUCIDLINK_MOUNT_POINT:-/media/lucidlink-1}
        REACT_APP_GRAFANA_URL: http://${SERVER_HOST}:3000
        REACT_APP_SERVER_HOST: ${SERVER_HOST}
    image: tc-mgr-frontend:latest
    container_name: tc-mgr-frontend
    ports:
      - "8090:80"  # Nginx production server
    depends_on:
      - backend
    environment:
      # Runtime configuration - uses relative paths
      - FRONTEND_API_URL=/api
      - FRONTEND_WS_URL=/ws
      - LUCIDLINK_MOUNT_POINT=${LUCIDLINK_MOUNT_POINT:-/media/lucidlink-1}
    # Run as root to avoid nginx PID file permission issues
    user: root
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # API Gateway for external cache job submissions
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: tc-mgr-api-gateway
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      API_GATEWAY_PORT: 8095
      API_GATEWAY_KEY: ${API_GATEWAY_KEY:-demo-api-key-2024}
      DB_HOST: postgres
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-teamcache_db}
      DB_USER: ${DB_USER:-teamcache_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-teamcache_password}
      ALLOWED_PATHS: ${ALLOWED_PATHS:-/media/lucidlink-1,/media/lucidlink-2}
    ports:
      - "${API_GATEWAY_PORT:-8095}:8095"
    volumes:
      - api-config:/config
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - default
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
    driver: local
  backend_logs:
    driver: local
  lucidlink_mount:
    driver: local
  lucidlink_mount_2:
    driver: local
  varnish_stats:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  api-config:
    driver: local

networks:
  default:
    name: tc-mgr-network